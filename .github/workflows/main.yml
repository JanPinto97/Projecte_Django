name: Django CI - Migrations and Documentation
# Jan Pintó
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Defineix els permisos del workflow
permissions:
  contents: write  # Permet escriure al repositori (per fer push)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Clona el codi del repositori
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Instal·la Python 3.11
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # 3. Instal·la Django i altres dependències
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django

    # 4. Executa les migracions
    - name: Run migrations
      run: |
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
      env:
        DJANGO_SETTINGS_MODULE: my_site.settings

    # 5. Mostra el directori de treball i el contingut abans de generar la documentació
    - name: List directory before generating documentation
      run: |
        pwd  # Mostra el directori de treball actual
        ls -la

    # 6. Genera documentació per a blog/views.py amb pydoc
    - name: Generate documentation for views.py
      run: |
        cd $GITHUB_WORKSPACE  # Canvia al directori arrel del repositori
        export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE
        python -c "import os; import django; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_site.settings'); django.setup(); import pydoc; pydoc.writedoc('blog.views'); print('blog.views.html generated at:', os.path.abspath('blog.views.html'))"
      env:
        DJANGO_SETTINGS_MODULE: my_site.settings
      continue-on-error: true

    # 7. Genera documentació per a blog/models.py amb pydoc
    - name: Generate documentation for models.py
      run: |
        cd $GITHUB_WORKSPACE  # Canvia al directori arrel del repositori
        export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE
        python -c "import os; import django; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_site.settings'); django.setup(); import pydoc; pydoc.writedoc('blog.models'); print('blog.models.html generated at:', os.path.abspath('blog.models.html'))"
      env:
        DJANGO_SETTINGS_MODULE: my_site.settings
      continue-on-error: true

    # 8. Renombra els fitxers generats
    - name: Rename generated documentation files
      run: |
        [ -f blog.views.html ] && mv blog.views.html views.html || echo "blog.views.html not found, skipping rename"
        [ -f blog.models.html ] && mv blog.models.html models.html || echo "blog.models.html not found, skipping rename"

    # 9. Mostra el contingut del directori després de generar i renombrar la documentació
    - name: List directory after renaming documentation
      run: |
        pwd  # Mostra el directori de treball actual
        ls -la

    # 10. Commit i push dels fitxers generats
    - name: Commit and push documentation files
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        # Afegeix els fitxers només si existeixen
        [ -f views.html ] && git add views.html || echo "views.html not found, skipping"
        [ -f models.html ] && git add models.html || echo "models.html not found, skipping"
        # Només fa commit si hi ha canvis
        git diff --staged --quiet || git commit -m "Update pydoc documentation files (views.html and models.html)"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
